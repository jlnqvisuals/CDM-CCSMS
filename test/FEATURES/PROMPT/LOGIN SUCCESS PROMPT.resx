<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="TimerClose.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>